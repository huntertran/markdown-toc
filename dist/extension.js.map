{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://auto-markdown-toc/./node_modules/anchor-markdown-header/anchor-markdown-header.js","webpack://auto-markdown-toc/./node_modules/emoji-regex/dist/index.js","webpack://auto-markdown-toc/./src/AutoMarkdownToc.ts","webpack://auto-markdown-toc/./src/ConfigManager.ts","webpack://auto-markdown-toc/./src/HeaderManager.ts","webpack://auto-markdown-toc/./src/TocManager.ts","webpack://auto-markdown-toc/./src/Utilities.ts","webpack://auto-markdown-toc/./src/models/Anchor.ts","webpack://auto-markdown-toc/./src/models/AnchorMode.ts","webpack://auto-markdown-toc/./src/models/Dictionary.ts","webpack://auto-markdown-toc/./src/models/Header.ts","webpack://auto-markdown-toc/./src/models/Options.ts","webpack://auto-markdown-toc/./src/models/RegexStrings.ts","webpack://auto-markdown-toc/external commonjs \"vscode\"","webpack://auto-markdown-toc/external node-commonjs \"os\"","webpack://auto-markdown-toc/webpack/bootstrap","webpack://auto-markdown-toc/./src/extension.ts"],"sourcesContent":["'use strict';\n\nvar emojiRegex = require('emoji-regex');\n\n// https://github.com/joyent/node/blob/192192a09e2d2e0d6bdd0934f602d2dbbf10ed06/tools/doc/html.js#L172-L183\nfunction getNodejsId(text, repetition) {\n  text = text.replace(/[^a-z0-9]+/g, '_');\n  text = text.replace(/^_+|_+$/, '');\n  text = text.replace(/^([^a-z])/, '_$1');\n\n  // If no repetition, or if the repetition is 0 then ignore. Otherwise append '_' and the number.\n  // An example may be found here: http://nodejs.org/api/domain.html#domain_example_1\n  if (repetition) {\n    text += '_' + repetition;\n  }\n\n  return text;\n}\n\nfunction basicGithubId(text) {\n  return text.replace(/ /g,'-')\n    // escape codes\n    .replace(/%([abcdef]|\\d){2,2}/ig, '')\n    // single chars that are removed\n    .replace(/[\\/?!:\\[\\]`.,()*\"';{}+=<>~\\$|#@&–—]/g,'')\n    // CJK punctuations that are removed\n    .replace(/[。？！，、；：“”【】（）〔〕［］﹃﹄“ ”‘’﹁﹂—…－～《》〈〉「」]/g, '')\n    ;\n\n}\n\nfunction getGithubId(text, repetition) {\n  text = basicGithubId(text);\n\n  // If no repetition, or if the repetition is 0 then ignore. Otherwise append '-' and the number.\n  if (repetition) {\n    text += '-' + repetition;\n  }\n\n  // Strip emojis\n  text = text.replace(emojiRegex(), '')\n\n  return text;\n}\n\nfunction getBitbucketId(text, repetition) {\n  text = 'markdown-header-' + basicGithubId(text);\n\n  // BitBucket condenses consecutive hyphens (GitHub doesn't)\n  text = text.replace(/--+/g, '-');\n\n  // If no repetition, or if the repetition is 0 then ignore. Otherwise append '_' and the number.\n  // https://groups.google.com/d/msg/bitbucket-users/XnEWbbzs5wU/Fat0UdIecZkJ\n  if (repetition) {\n    text += '_' + repetition;\n  }\n\n  return text;\n}\n\nfunction basicGhostId(text) {\n  return text.replace(/ /g,'')\n    // escape codes are not removed\n    // single chars that are removed\n    .replace(/[\\/?:\\[\\]`.,()*\"';{}\\-+=<>!@#%^&\\\\\\|]/g,'')\n    // $ replaced with d\n    .replace(/\\$/g, 'd')\n    // ~ replaced with t\n    .replace(/~/g, 't')\n    ;\n}\n\nfunction getGhostId(text) {\n  text = basicGhostId(text);\n\n  // Repetitions not supported\n\n  return text;\n}\n\n// see: https://github.com/gitlabhq/gitlabhq/blob/master/doc/user/markdown.md#header-ids-and-links\nfunction getGitlabId(text, repetition) {\n  text = text\n    .replace(/<(.*)>(.*)<\\/\\1>/g,\"$2\") // html tags\n    .replace(/!\\[.*\\]\\(.*\\)/g,'')      // image tags\n    .replace(/\\[(.*)\\]\\(.*\\)/,\"$1\")    // url\n    .replace(/\\s+/g, '-')              // All spaces are converted to hyphens\n    .replace(/[\\/?!:\\[\\]`.,()*\"';{}+=<>~\\$|#@]/g,'') // All non-word text (e.g., punctuation, HTML) is removed\n    .replace(/[。？！，、；：“”【】（）〔〕［］﹃﹄“ ”‘’﹁﹂—…－～《》〈〉「」]/g, '') // remove CJK punctuations\n    .replace(/[-]+/g,'-')              // duplicated hyphen\n    .replace(/^-/,'')                  // ltrim hyphen\n    .replace(/-$/,'');                 // rtrim hyphen\n  // If no repetition, or if the repetition is 0 then ignore. Otherwise append '-' and the number.\n  if (repetition) {\n    text += '-' + repetition;\n  }\n  return text;\n}\n\n\n/**\n * Generates an anchor for the given header and mode.\n *\n * @name anchorMarkdownHeader\n * @function\n * @param header      {String} The header to be anchored.\n * @param mode        {String} The anchor mode (github.com|nodejs.org|bitbucket.org|ghost.org|gitlab.com).\n * @param repetition  {Number} The nth occurrence of this header text, starting with 0. Not required for the 0th instance.\n * @param moduleName  {String} The name of the module of the given header (required only for 'nodejs.org' mode).\n * @return            {String} The header anchor that is compatible with the given mode.\n */\nmodule.exports = function anchorMarkdownHeader(header, mode, repetition, moduleName) {\n  mode = mode || 'github.com';\n  var replace;\n\n  switch(mode) {\n    case 'github.com':\n      replace = getGithubId;\n      break;\n    case 'bitbucket.org':\n      replace = getBitbucketId;\n      break;\n    case 'gitlab.com':\n      replace = getGitlabId;\n      break;\n    case 'nodejs.org':\n      if (!moduleName) throw new Error('Need module name to generate proper anchor for ' + mode);\n      replace = function (hd, repetition) {\n          return getNodejsId(moduleName + '.' + hd, repetition);\n      };\n      break;\n    case 'ghost.org':\n      replace = getGhostId;\n      break;\n    default:\n      throw new Error('Unknown mode: ' + mode);\n  }\n\n  var href = replace(header.trim().toLowerCase(), repetition);\n\n  return '[' + header + '](#' + encodeURI(href) + ')';\n};\n","\"use strict\";\n\nmodule.exports = function () {\n\t// https://mathiasbynens.be/notes/es-unicode-property-escapes#emoji\n\treturn (/(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC69\\uDC6E\\uDC70-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3D\\uDD3E\\uDDD1-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])?|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDEEB\\uDEEC\\uDEF4-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])\\uFE0F/g\n\t);\n};","import {\n    window,\n    Position,\n    Range,\n    TextEditorEdit,\n    TextDocument,\n    TextDocumentChangeEvent\n} from 'vscode';\n\nimport { Header } from \"./models/Header\";\nimport { ConfigManager } from './ConfigManager';\nimport { HeaderManager } from './HeaderManager';\nimport { AnchorMode } from './models/AnchorMode';\nimport { RegexStrings } from './models/RegexStrings';\nimport { TocManager } from './TocManager';\n\nexport class AutoMarkdownToc {\n\n    configManager = new ConfigManager();\n    headerManager = new HeaderManager(this.configManager);\n    tocManager = new TocManager();\n\n    public onDidChangeTextDocument(event: TextDocumentChangeEvent) {\n        if (event.contentChanges.length > 0) {\n            this.tocManager.updateTocRange(event.contentChanges);\n        }\n    }\n\n    public onDidSaveTextDocument() {\n        if (!this.configManager.options.UPDATE_ON_SAVE.value) {\n            return;\n        }\n\n        // Prevent save loop\n        if (this.configManager.options.isProgrammaticallySave) {\n            this.configManager.options.isProgrammaticallySave = false;\n            return;\n        }\n\n        let editor = window.activeTextEditor;\n        if (editor !== undefined) {\n            let doc = editor.document;\n\n            if (doc.languageId !== 'markdown') {\n                return;\n            }\n\n            let tocRange = this.tocManager.getTocRange();\n\n            if (!tocRange.isSingleLine) {\n                this.updateMarkdownToc();\n                this.configManager.options.isProgrammaticallySave = true;\n                doc.save();\n            }\n        }\n    }\n\n    public async updateMarkdownToc() {\n        let autoMarkdownToc = this;\n        let editor = window.activeTextEditor;\n\n        if (editor === undefined) {\n            return;\n        }\n\n        autoMarkdownToc.configManager.updateOptions();\n        let tocRange = autoMarkdownToc.tocManager.getTocRange();\n        let headerList = await autoMarkdownToc.headerManager.getHeaderList();\n        let document = editor.document;\n\n        editor.edit(async editBuilder => {\n            if (!tocRange.isSingleLine) {\n                editBuilder.delete(tocRange);\n                autoMarkdownToc.deleteAnchors(editBuilder);\n            }\n\n            // TODO: need to go back to this\n            // if (this.configManager.options.DETECT_AUTO_SET_SECTION.value) { // } && this.configManager.options.isOrderedListDetected) {\n            //     autoMarkdownToc.updateHeadersWithSections(editBuilder, headerList, document);\n\n            //     //rebuild header list, because headers have changed\n            //     headerList = await autoMarkdownToc.headerManager.getHeaderList();\n            // }\n\n            autoMarkdownToc.createToc(editBuilder, headerList, tocRange.start);\n            autoMarkdownToc.insertAnchors(editBuilder, headerList);\n        });\n    }\n\n    public deleteMarkdownToc() {\n        let autoMarkdownToc = this;\n        let editor = window.activeTextEditor;\n\n        if (editor === undefined) {\n            return;\n        }\n\n        editor.edit(function (editBuilder) {\n            let tocRange = autoMarkdownToc.tocManager.getTocRange();\n            if (tocRange.isSingleLine) {\n                return;\n            }\n\n            editBuilder.delete(tocRange);\n            autoMarkdownToc.deleteAnchors(editBuilder);\n        });\n    }\n\n    public updateHeadersWithSections(editBuilder: TextEditorEdit, headerList: Header[], document: TextDocument) {\n        headerList.forEach(header => {\n\n            if (header.range.start.line !== 0 && !document.lineAt(header.range.start.line - 1).isEmptyOrWhitespace) {\n                editBuilder.insert(new Position(header.range.start.line, 0), this.configManager.options.lineEnding);\n            }\n\n            if (this.configManager.options.ORDERED_LIST.value) {\n                editBuilder.replace(header.range, header.fullHeaderWithOrder);\n            } else {\n                editBuilder.replace(header.range, header.fullHeaderWithoutOrder);\n            }\n        });\n    }\n\n    public async updateMarkdownSections() {\n        this.configManager.updateOptions();\n\n        let headerList = await this.headerManager.getHeaderList();\n        let editor = window.activeTextEditor;\n        let config = this.configManager;\n\n        if (editor !== undefined) {\n            config.options.isOrderedListDetected = true;\n            let document = editor.document;\n            editor.edit(editBuilder => {\n                this.updateHeadersWithSections(editBuilder, headerList, document);\n            });\n        }\n    }\n\n    public async deleteMarkdownSections() {\n        this.configManager.updateOptions();\n        let headerList = await this.headerManager.getHeaderList();\n        let editor = window.activeTextEditor;\n        let config = this.configManager;\n\n        if (editor !== undefined && headerList !== undefined) {\n            config.options.isOrderedListDetected = false;\n            editor.edit(function (editBuilder) {\n                headerList.forEach(element => {\n                    editBuilder.replace(element.range, element.fullHeaderWithoutOrder);\n                });\n            });\n        }\n    }\n\n    /**\n     * insert anchor for a header\n     * @param editBuilder\n     * @param header\n     */\n    private insertAnchor(editBuilder: TextEditorEdit, header: Header) {\n        let anchorMatches = header.tocRowWithAnchor(header.tocWithoutOrder).match(RegexStrings.Instance.REGEXP_ANCHOR);\n        if (anchorMatches !== null) {\n            // let name = anchorMatches[1];\n            let text = [\n                this.configManager.options.lineEnding,\n                '<a id=\"',\n                header.anchor.id,\n                '\" name=\"',\n                header.anchor.name,\n                '\"></a>'];\n\n            let insertPosition = new Position(header.range.end.line, header.range.end.character);\n\n            if (this.configManager.options.ANCHOR_MODE.value === AnchorMode.bitbucket) {\n                text = text.slice(1);\n                text.push(this.configManager.options.lineEnding);\n                text.push(this.configManager.options.lineEnding);\n                insertPosition = new Position(header.range.start.line, 0);\n            }\n\n            editBuilder.insert(insertPosition, text.join(''));\n        }\n    }\n\n    private insertAnchors(editBuilder: TextEditorEdit, headerList: Header[]) {\n        if (!this.configManager.options.INSERT_ANCHOR.value) {\n            return;\n        }\n\n        headerList.forEach(header => {\n            this.insertAnchor(editBuilder, header);\n        });\n    }\n\n    private deleteAnchors(editBuilder: TextEditorEdit) {\n        let editor = window.activeTextEditor;\n        if (editor !== undefined) {\n            let doc = editor.document;\n            for (let index = 0; index < doc.lineCount; index++) {\n                let lineText = doc.lineAt(index).text;\n                if (lineText.match(RegexStrings.Instance.REGEXP_MARKDOWN_ANCHOR) === null) {\n                    continue;\n                }\n\n                let startPosition = this.getStartPositionOfAnchorLine(index, doc);\n\n                let range = new Range(startPosition, new Position(startPosition.line + 1, 0));\n                editBuilder.delete(range);\n            }\n        }\n    }\n\n    private getStartPositionOfAnchorLine(index: number, doc: TextDocument) {\n        // To ensure the anchor will not insert an extra empty line\n        let startPosition = new Position(index, 0);\n\n        if (this.configManager.options.ANCHOR_MODE.value === AnchorMode.bitbucket) {\n            if (index > 0 && doc.lineAt(index - 1).text.length === 0) {\n                startPosition = new Position(index - 2, 0);\n            }\n        }\n\n        return startPosition;\n    }\n\n    private createToc(editBuilder: TextEditorEdit, headerList: Header[], insertPosition: Position) {\n\n        let text: string[] = [];\n\n        //// TOC STAT: the custom option IS inside the toc start.\n        text = text.concat(this.generateTocStartIndicator());\n\n        //// HEADERS\n        let minimumRenderedDepth = headerList[0].depth;\n        headerList.forEach(header => {\n            minimumRenderedDepth = Math.min(minimumRenderedDepth, header.depth);\n        });\n\n        let tocRows: string[] = [];\n\n        headerList.forEach(header => {\n            if (header.depth >= this.configManager.options.DEPTH_FROM.value && !header.isIgnored) {\n                let row = this.generateTocRow(header, minimumRenderedDepth);\n                tocRows.push(row);\n            }\n        });\n\n        text.push(tocRows.join(this.configManager.options.lineEnding));\n\n        //// TOC END\n        text.push(this.configManager.options.lineEnding + \"<!-- /TOC -->\");\n\n        // insert\n        editBuilder.insert(insertPosition, text.join(this.configManager.options.lineEnding));\n    }\n\n    private generateTocRow(header: Header, minimumRenderedDepth: number) {\n        let row: string[] = [];\n\n        // Indentation\n        let indentRepeatTime = header.depth - Math.max(this.configManager.options.DEPTH_FROM.value, minimumRenderedDepth);\n        row.push(this.configManager.options.tab.repeat(indentRepeatTime));\n\n        row.push(this.configManager.options.BULLET_CHAR.value);\n\n        row.push(' ');\n\n        // TOC with or without link and order\n        if (this.configManager.options.WITH_LINKS.value) {\n            row.push(header.tocRowWithAnchor(this.getTocString(header)));\n        } else {\n            row.push(this.getTocString(header));\n        }\n\n        return row.join('');\n    }\n\n    private getTocString(header: Header) {\n        if (this.configManager.options.ORDERED_LIST.value) {\n            return header.tocWithOrder;\n        } else {\n            return header.tocWithoutOrder;\n        }\n    }\n\n    private generateTocStartIndicator() {\n        let tocStartIndicator: string[] = [];\n\n        tocStartIndicator.push('<!-- TOC ');\n\n        this.generateCustomOptionsInTocStart(tocStartIndicator);\n\n        tocStartIndicator.push('-->' + this.configManager.options.lineEnding);\n\n        return tocStartIndicator.join('');\n    }\n\n    private generateCustomOptionsInTocStart(tocStartIndicator: string[]) {\n        // custom options\n        this.configManager.options.optionsFlag.forEach(optionKey => {\n            if (this.configManager.options.optionsFlag.indexOf(optionKey) !== -1) {\n                tocStartIndicator.push(optionKey + ':' + this.configManager.getOptionValueByKey(optionKey) + ' ');\n            }\n        });\n    }\n\n    dispose() {\n    }\n}","import { RegexStrings } from './models/RegexStrings';\nimport { Options } from './models/Options';\nimport {\n    workspace,\n    window\n} from 'vscode';\n\nexport class ConfigManager {\n\n    options = new Options();\n\n    public updateOptions() {\n        this.loadConfigurations();\n        this.loadCustomOptions();\n    }\n\n    public loadConfigurations() {\n        this.options.DEPTH_FROM.workspaceValue = <number>workspace.getConfiguration(this.options.extensionName).get(this.options.DEPTH_FROM.key);\n        this.options.DEPTH_TO.workspaceValue = <number>workspace.getConfiguration(this.options.extensionName).get(this.options.DEPTH_TO.key);\n        this.options.INSERT_ANCHOR.workspaceValue = <boolean>workspace.getConfiguration(this.options.extensionName).get(this.options.INSERT_ANCHOR.key);\n        this.options.WITH_LINKS.workspaceValue = <boolean>workspace.getConfiguration(this.options.extensionName).get(this.options.WITH_LINKS.key);\n        this.options.ORDERED_LIST.workspaceValue = <boolean>workspace.getConfiguration(this.options.extensionName).get(this.options.ORDERED_LIST.key);\n        this.options.UPDATE_ON_SAVE.workspaceValue = <boolean>workspace.getConfiguration(this.options.extensionName).get(this.options.UPDATE_ON_SAVE.key);\n        this.options.ANCHOR_MODE.workspaceValue = <string>workspace.getConfiguration(this.options.extensionName).get(this.options.ANCHOR_MODE.key);\n        this.options.BULLET_CHAR.workspaceValue = <string>workspace.getConfiguration(this.options.extensionName).get(this.options.BULLET_CHAR.key);\n        this.options.DETECT_AUTO_SET_SECTION.workspaceValue = <boolean>workspace.getConfiguration(this.options.extensionName).get(this.options.DETECT_AUTO_SET_SECTION.key);\n\n        this.options.lineEnding = <string>workspace.getConfiguration(\"files\", null).get(\"eol\");\n        if (this.options.lineEnding === 'auto') {\n            this.options.lineEnding = <string>this.options.EOL;\n        }\n\n        this.options.tabSize = <number>workspace.getConfiguration(\"[markdown]\", null)[\"editor.tabSize\"];\n        if (this.options.tabSize === undefined || this.options.tabSize === null) {\n            this.options.tabSize = <number>workspace.getConfiguration(\"editor\", null).get(\"tabSize\");\n        }\n\n        this.options.insertSpaces = <boolean>workspace.getConfiguration(\"[markdown]\", null)[\"editor.insertSpaces\"];\n        if (this.options.insertSpaces === undefined || this.options.insertSpaces === null) {\n            this.options.insertSpaces = <boolean>workspace.getConfiguration(\"editor\", null).get(\"insertSpaces\");\n        }\n\n        if (this.options.insertSpaces && this.options.tabSize > 0) {\n            this.options.tab = \" \".repeat(this.options.tabSize);\n        }\n\n        if (<string>workspace.getConfiguration(\"files\", null).get(\"autoSave\") !== \"off\") {\n            this.options.autoSave = true;\n        }\n    }\n\n    /**\n     * DEPRECATED\n     * use single line unique options instead\n     */\n    public loadCustomOptions() {\n        this.options.optionsFlag = [];\n\n        let editor = window.activeTextEditor;\n        if (editor === undefined) {\n            return;\n        }\n\n        for (let index = 0; index < editor.document.lineCount; index++) {\n            let lineText = editor.document.lineAt(index).text;\n\n            if (lineText.match(RegexStrings.Instance.REGEXP_TOC_START)) {\n                let options = lineText.match(RegexStrings.Instance.REGEXP_TOC_CONFIG);\n\n                if (options !== null) {\n                    options.forEach(element => {\n                        let pair = RegexStrings.Instance.REGEXP_TOC_CONFIG_ITEM.exec(element);\n\n                        if (pair !== null) {\n                            let key = pair[1].toLocaleLowerCase();\n                            let value = pair[2];\n\n                            switch (key) {\n                                case this.options.DEPTH_FROM.lowerCaseKey:\n                                    this.options.optionsFlag.push(key);\n                                    this.options.DEPTH_FROM.uniqueValue = this.parseValidNumber(value);\n                                    break;\n                                case this.options.DEPTH_TO.lowerCaseKey:\n                                    this.options.optionsFlag.push(key);\n                                    this.options.DEPTH_TO.uniqueValue = Math.max(this.parseValidNumber(value), this.options.DEPTH_FROM.value);\n                                    break;\n                                case this.options.INSERT_ANCHOR.lowerCaseKey:\n                                    this.options.optionsFlag.push(key);\n                                    this.options.INSERT_ANCHOR.uniqueValue = this.parseBool(value);\n                                    break;\n                                case this.options.WITH_LINKS.lowerCaseKey:\n                                    this.options.optionsFlag.push(key);\n                                    this.options.WITH_LINKS.uniqueValue = this.parseBool(value);\n                                    break;\n                                case this.options.ORDERED_LIST.lowerCaseKey:\n                                    this.options.optionsFlag.push(key);\n                                    this.options.ORDERED_LIST.uniqueValue = this.parseBool(value);\n                                    break;\n                                case this.options.UPDATE_ON_SAVE.lowerCaseKey:\n                                    this.options.optionsFlag.push(key);\n                                    this.options.UPDATE_ON_SAVE.uniqueValue = this.parseBool(value);\n                                    break;\n                                case this.options.ANCHOR_MODE.lowerCaseKey:\n                                    this.options.optionsFlag.push(key);\n                                    this.options.ANCHOR_MODE.uniqueValue = value;\n                                    break;\n                                case this.options.BULLET_CHAR.lowerCaseKey:\n                                    this.options.optionsFlag.push(key);\n                                    this.options.BULLET_CHAR.uniqueValue = value;\n                                    break;\n                                case this.options.DETECT_AUTO_SET_SECTION.lowerCaseKey:\n                                    this.options.optionsFlag.push(key);\n                                    this.options.DETECT_AUTO_SET_SECTION.uniqueValue = value;\n                                    break;\n                            }\n                        }\n                    });\n                }\n\n                break;\n            }\n        }\n\n        return;\n    }\n\n\n    public getOptionValueByKey(key: string) {\n        switch (key.toLowerCase()) {\n            case this.options.DEPTH_FROM.lowerCaseKey:\n                return this.options.DEPTH_FROM.value;\n            case this.options.DEPTH_TO.lowerCaseKey:\n                return this.options.DEPTH_TO.value;\n            case this.options.INSERT_ANCHOR.lowerCaseKey:\n                return this.options.INSERT_ANCHOR.value;\n            case this.options.WITH_LINKS.lowerCaseKey:\n                return this.options.WITH_LINKS.value;\n            case this.options.ORDERED_LIST.lowerCaseKey:\n                return this.options.ORDERED_LIST.value;\n            case this.options.UPDATE_ON_SAVE.lowerCaseKey:\n                return this.options.UPDATE_ON_SAVE.value;\n            case this.options.ANCHOR_MODE.lowerCaseKey:\n                return this.options.ANCHOR_MODE.value;\n            case this.options.BULLET_CHAR.lowerCaseKey:\n                return this.options.BULLET_CHAR.value;\n            case this.options.DETECT_AUTO_SET_SECTION.lowerCaseKey:\n                return this.options.DETECT_AUTO_SET_SECTION.value;\n        }\n    }\n\n    private parseBool(value: string) {\n        return value.toLocaleLowerCase() === 'true';\n    }\n\n    private parseValidNumber(value: string) {\n        let num = parseInt(value);\n\n        if (num < 1) {\n            return 1;\n        }\n\n        return num;\n    }\n}","import { Header } from \"./models/Header\";\nimport { ConfigManager } from \"./ConfigManager\";\nimport { window, DocumentSymbol, commands, Uri, TextEditor, SymbolKind } from \"vscode\";\nimport { RegexStrings } from \"./models/RegexStrings\";\n\n\nexport class HeaderManager {\n    configManager: ConfigManager;\n\n    constructor(configManager: ConfigManager) {\n        this.configManager = configManager;\n    }\n     \n    private async getDocumentSymbols(fileUri: Uri) {                \n        let allSymbols = <DocumentSymbol[]>await commands.executeCommand(\"vscode.executeDocumentSymbolProvider\", fileUri);\n\n        // Markdown headers can only be strings. Exclude all other symbols.\n        // #60: With plantuml code blocks, the @startmindmap/@endmindmap sentinels\n        // cause getDocumentSymbols to return Object kinds as well which results in empty TOCs\n        return allSymbols.filter(function(sym){\n            return sym.kind === SymbolKind.String;\n        });\n    }\n\n    public async getHeaderList() {\n        let headerList: Header[] = [];\n        let editor = window.activeTextEditor;\n\n        if (editor !== undefined) {\n\n            let fileUri = Uri.file(editor.document.fileName);\n           \n            let symbols = await this.getDocumentSymbols(fileUri);            \n\n            let headerLevels = new Map<number, number>();\n            let allHeaders = new Array<Header>();\n\n            this.convertAllFirstLevelHeader(symbols, allHeaders, headerLevels);\n\n            let consideredDepthToInclude = this.getMostPopularHeaderDepth(headerLevels);\n\n\n            for (let index = 0; index < allHeaders.length; index++) {\n                let header = allHeaders[index];\n\n                // only level of consideredDepthToInclude\n                if (header.depth > consideredDepthToInclude) {\n                    continue;\n                }\n\n                header.isIgnored = this.getIsHeaderIgnored(header, editor);\n                header.orderArray = this.calculateHeaderOrder(header, headerList);\n                header.orderedListString = header.orderArray.join('.') + \".\";\n\n                if (header.depth <= this.configManager.options.DEPTH_TO.value) {\n                    headerList.push(header);\n                    this.addHeaderChildren(symbols[index], headerList, editor);\n                }\n            }\n\n            // violation of clean code\n            this.detectAutoOrderedHeader(headerList);\n        }\n\n        return headerList;\n    }\n\n    private getIsHeaderIgnored(header: Header, editor: TextEditor) {\n        let previousLine = header.range.start.line - 1;\n        if (previousLine > 0) {\n            if (editor.document.lineAt(previousLine).text.match(RegexStrings.Instance.REGEXP_IGNORE_TITLE)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private getMostPopularHeaderDepth(headerLevels: Map<number, number>) {\n        let mostPopularHeaderDepth = 0;\n        let mostPopularHeaderDepthCount = 0;\n\n        headerLevels.forEach((value: number, key: number) => {\n            if (value >= mostPopularHeaderDepth) {\n                mostPopularHeaderDepthCount = value;\n                mostPopularHeaderDepth = key;\n            }\n        });\n\n        return mostPopularHeaderDepth;\n    }\n\n    private convertAllFirstLevelHeader(symbols: DocumentSymbol[], allHeaders: Header[], headerLevels: Map<number, number>) {\n        for (let index = 0; index < symbols.length; index++) {            \n            let header = new Header(this.configManager.options.ANCHOR_MODE.value);\n            header.convertFromSymbol(symbols[index]);\n            allHeaders.push(header);\n\n            let depthCount = headerLevels.get(header.depth);\n\n            if (depthCount === undefined) {\n                headerLevels.set(header.depth, 1);\n            }\n            else {\n                depthCount = depthCount + 1;\n                headerLevels.set(header.depth, depthCount);\n            }            \n        }\n    }\n\n    private addHeaderChildren(symbol: DocumentSymbol, headerList: Header[], editor: TextEditor) {\n        if (symbol.children.length > 0) {\n            for (let index = 0; index < symbol.children.length; index++) {\n\n                let header = new Header(this.configManager.options.ANCHOR_MODE.value);\n\n                header.convertFromSymbol(symbol.children[index]);\n\n                header.isIgnored = this.getIsHeaderIgnored(header, editor);\n\n                header.orderArray = this.calculateHeaderOrder(header, headerList);\n                header.orderedListString = header.orderArray.join('.') + \".\";\n\n                if (header.depth <= this.configManager.options.DEPTH_TO.value) {\n                    headerList.push(header);\n                    this.addHeaderChildren(symbol.children[index], headerList, editor);\n                }\n            }\n        }\n    }\n\n    private detectAutoOrderedHeader(headerList: Header[]) {\n\n        this.configManager.options.isOrderedListDetected = false;\n\n        for (let index = 0; index < headerList.length; index++) {\n            if (headerList[index].orderedListString !== undefined && headerList[index].orderedListString !== '') {\n                this.configManager.options.isOrderedListDetected = true;\n                break;\n            }\n        }\n    }\n\n    public calculateHeaderOrder(headerBeforePushToList: Header, headerList: Header[]) {\n\n        if (headerList.length === 0) {\n            // special case: First header\n            let orderArray = new Array(headerBeforePushToList.depth);\n            orderArray[headerBeforePushToList.depth - 1] = 1;\n            return orderArray;\n        }\n\n        let lastHeaderInList = headerList[headerList.length - 1];\n\n        if (headerBeforePushToList.depth < lastHeaderInList.depth) {\n            // continue of the parent level\n\n            let previousHeader: Header | undefined;\n\n            for (let index = headerList.length - 1; index >= 0; index--) {\n                if (headerList[index].depth === headerBeforePushToList.depth) {\n                    previousHeader = headerList[index];\n                    break;\n                }\n            }\n\n            if (previousHeader !== undefined) {\n                let orderArray = Object.assign([], previousHeader.orderArray);\n                orderArray[orderArray.length - 1]++;\n\n                return orderArray;\n            } else {\n                // special case: first header has greater level than second header\n                let orderArray = new Array(headerBeforePushToList.depth);\n                orderArray[headerBeforePushToList.depth - 1] = 1;\n                return orderArray;\n            }\n        }\n\n        if (headerBeforePushToList.depth > lastHeaderInList.depth) {\n            // child level of previous\n            // order start with 1\n            let orderArray = Object.assign([], lastHeaderInList.orderArray);\n            orderArray.push(1);\n\n            return orderArray;\n        }\n\n        if (headerBeforePushToList.depth === lastHeaderInList.depth) {\n            // the same level, increase last item in orderArray\n            let orderArray = Object.assign([], lastHeaderInList.orderArray);\n            orderArray[orderArray.length - 1]++;\n\n            return orderArray;\n        }\n\n        return [];\n    }\n}","import {\r\n    Position,\r\n    Range,\r\n    TextDocumentContentChangeEvent,\r\n    window\r\n} from \"vscode\";\r\n\r\nimport { RegexStrings } from \"./models/RegexStrings\";\r\nimport { Utilities } from \"./Utilities\";\r\n\r\nexport class TocManager {\r\n    // private configManager: ConfigManager;\r\n\r\n    private tocRange: Range | undefined;\r\n\r\n    constructor() {\r\n        // this.configManager = configManager;\r\n    }\r\n\r\n    private scanForTocRange(): void {\r\n        let editor = window.activeTextEditor;\r\n\r\n        if (editor === undefined) {\r\n            this.tocRange = new Range(0, 0, 0, 0);\r\n            return;\r\n        }\r\n\r\n        let doc = editor.document;\r\n        let start, end: Position | undefined;\r\n\r\n        for (let index = 0; index < doc.lineCount; index++) {\r\n\r\n            if (Utilities.isLineStartOrEndOfCodeBlock(index, doc)) {\r\n                index = Utilities.getNextLineIndexIsNotInCode(index, doc);\r\n            }\r\n\r\n            let lineText = doc.lineAt(index).text;\r\n\r\n            if ((start === undefined) && (lineText.match(RegexStrings.Instance.REGEXP_TOC_START) && !lineText.match(RegexStrings.Instance.REGEXP_IGNORE_TITLE))) {\r\n                start = new Position(index, 0);\r\n            }\r\n            else if (lineText.match(RegexStrings.Instance.REGEXP_TOC_STOP)) {\r\n                end = new Position(index, lineText.length);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if ((start === undefined) || (end === undefined)) {\r\n            if (start !== undefined) {\r\n                end = start;\r\n            } else if (end !== undefined) {\r\n                start = end;\r\n            } else {\r\n                start = editor.selection.active;\r\n                end = editor.selection.active;\r\n            }\r\n        }\r\n\r\n        // at this point, end will not undefined,\r\n        // but we add declaration here for passing typescript lint\r\n        if (end === undefined) {\r\n            this.tocRange = new Range(start, new Position(0, 0));\r\n        }\r\n\r\n        this.tocRange = new Range(start, end);\r\n        // console.log(this.tocRange);\r\n    }\r\n\r\n    /**\r\n     * Get TOC range, in case of no TOC, return the active line\r\n     * In case of the editor is not available, return the first line\r\n    */\r\n    public getTocRange(): Range {\r\n        if (this.tocRange === undefined) {\r\n            this.scanForTocRange();\r\n        }\r\n\r\n        if (this.tocRange === undefined) {\r\n            this.tocRange = new Range(0, 0, 0, 0);\r\n        }\r\n\r\n        return this.tocRange;\r\n    }\r\n\r\n    public updateTocRange(contentChanges: readonly TextDocumentContentChangeEvent[]): void {\r\n        for (let index = 0; index < contentChanges.length; index++) {\r\n            if (this.tocRange === undefined ||\r\n                contentChanges[index].range.start.line === this.tocRange?.start.line ||\r\n                contentChanges[index].range.end.line === this.tocRange?.end.line) {\r\n                this.scanForTocRange();\r\n            }\r\n        }\r\n    }\r\n}","import { TextDocument } from \"vscode\";\r\nimport { RegexStrings } from \"./models/RegexStrings\";\r\n\r\nexport class Utilities {\r\n    public static getNextLineIndexIsNotInCode(index: number, doc: TextDocument) {\r\n        for (let currentLineIndex = index + 1; currentLineIndex < doc.lineCount; currentLineIndex++) {\r\n            if (this.isLineStartOrEndOfCodeBlock(currentLineIndex, doc)) {\r\n                return currentLineIndex + 1;\r\n            }\r\n        }\r\n\r\n        return doc.lineCount - 1;\r\n    }\r\n\r\n    public static isLineStartOrEndOfCodeBlock(lineNumber: number, doc: TextDocument) {\r\n        let nextLine = doc.lineAt(lineNumber).text;\r\n\r\n        let isCodeStyle1 = nextLine.match(RegexStrings.Instance.REGEXP_CODE_BLOCK1) !== null;\r\n        let isCodeStyle2 = nextLine.match(RegexStrings.Instance.REGEXP_CODE_BLOCK2) !== null;\r\n\r\n        return isCodeStyle1 || isCodeStyle2;\r\n    }\r\n}","import { Position, Range } from \"vscode\";\r\n\r\nexport class Anchor {\r\n    id: string = \"\";\r\n    name: string = \"\";\r\n\r\n    range: Range = new Range(0, 0, 0, 0);\r\n\r\n    constructor(headerText: string) {\r\n        headerText = headerText.toLowerCase().replace(/\\s/gi, \"-\");\r\n        this.id = \"markdown-\" + encodeURIComponent(headerText);\r\n        this.name = encodeURIComponent(headerText);\r\n    }\r\n}","export enum AnchorMode{\r\n    github = \"github.com\",\r\n    bitbucket = \"bitbucket.org\",\r\n    ghost = \"ghost.org\",\r\n    gitlab = \"gitlab.com\"\r\n}","export class Dictionary {\r\n    key: string;\r\n    lowerCaseKey: string;\r\n    workspaceValue: any;\r\n    uniqueValue: any;\r\n\r\n    constructor(key: string, defaultWorkspaceValue: string | number | string[] | boolean) {\r\n        this.key = key;\r\n        this.lowerCaseKey = key.toLocaleLowerCase();\r\n        this.workspaceValue = defaultWorkspaceValue;\r\n    }\r\n\r\n    public get value() {\r\n        if (this.uniqueValue !== undefined) {\r\n            return this.uniqueValue;\r\n        }\r\n\r\n        return this.workspaceValue;\r\n    }\r\n}","import {\n    Range, Position, DocumentSymbol\n} from 'vscode';\nimport { AnchorMode } from './AnchorMode';\nimport { Anchor } from './Anchor';\nimport { RegexStrings } from './RegexStrings';\n\nexport class Header {\n    headerMark: string = \"\";\n    orderedListString: string = \"\";\n    dirtyTitle: string = \"\";\n    range: Range;\n\n    isIgnored: boolean = false;\n\n    orderArray: number[] = [];\n\n    anchorMode: AnchorMode = AnchorMode.github;\n\n    anchor: Anchor;\n\n    constructor(anchorMode: AnchorMode) {\n        this.anchorMode = anchorMode;\n        this.range = new Range(0, 0, 0, 0);\n        this.anchor = new Anchor(\"\");\n    }\n\n    public convertFromSymbol(symbol: DocumentSymbol) {\n        let headerTextSplit = symbol.name.match(RegexStrings.Instance.REGEXP_HEADER_META);\n\n        if (headerTextSplit !== null) {\n            this.headerMark = headerTextSplit[1];\n            this.orderedListString = headerTextSplit[2];\n            this.dirtyTitle = headerTextSplit[4];\n        }\n\n        this.range = new Range(symbol.range.start, new Position(symbol.range.start.line, symbol.name.length));\n        this.anchor = new Anchor(this.cleanUpTitle(this.dirtyTitle));\n    }\n\n    public get depth(): number {\n        return this.headerMark.length;\n    }\n\n    public get isHeader(): boolean {\n        return this.headerMark !== \"\";\n    }\n\n    public tocRowWithAnchor(tocString: string): string {\n        let title = this.cleanUpTitle(tocString);\n        let ANCHOR_MARKDOWN_HEADER = require('anchor-markdown-header');\n        return ANCHOR_MARKDOWN_HEADER(title, this.anchorMode);\n    }\n\n    public get tocWithoutOrder(): string {\n        return this.dirtyTitle;\n    }\n\n    public get tocWithOrder(): string {\n        return this.orderArray.join('.') + \". \" + this.tocWithoutOrder;\n    }\n\n    public get fullHeaderWithOrder(): string {\n        return this.headerMark + \" \" + this.tocWithOrder;\n    }\n\n    public get fullHeaderWithoutOrder(): string {\n        return this.headerMark + \" \" + this.tocWithoutOrder;\n    }\n\n    private cleanUpTitle(dirtyTitle: string) {\n        let title = dirtyTitle.replace(/\\[(.+)]\\([^)]*\\)/gi, \"$1\"); // replace link\n        title = title.replace(/<!--.+-->/gi, \"\"); // replace comment\n        title = title.replace(/\\#*`|\\(|\\)/gi, \"\").trim(); // replace special char\n        return title;\n    }\n}\n","import { Dictionary } from './Dictionary';\r\nimport { AnchorMode } from './AnchorMode';\r\n\r\nexport class Options {\r\n\r\n    // current document options\r\n    optionsFlag: string[] = [];\r\n    isProgrammaticallySave: boolean = false;\r\n    isOrderedListDetected: boolean = false;\r\n\r\n    // workspace settings\r\n    DEPTH_FROM: Dictionary = new Dictionary(\"depthFrom\", 1);\r\n    DEPTH_TO: Dictionary = new Dictionary(\"depthTo\", 6);\r\n    INSERT_ANCHOR: Dictionary = new Dictionary(\"insertAnchor\", false);\r\n    WITH_LINKS: Dictionary = new Dictionary(\"withLinks\", true);\r\n    ORDERED_LIST: Dictionary = new Dictionary(\"orderedList\", false);\r\n    UPDATE_ON_SAVE: Dictionary = new Dictionary(\"updateOnSave\", true);\r\n    ANCHOR_MODE: Dictionary = new Dictionary(\"anchorMode\", AnchorMode.github);\r\n    BULLET_CHAR: Dictionary = new Dictionary(\"bulletCharacter\", \"-\");\r\n    DETECT_AUTO_SET_SECTION: Dictionary = new Dictionary(\"detectAndAutoSetSection\", false);\r\n\r\n    extensionName: string = \"markdown-toc\";\r\n    EOL = require('os').EOL;\r\n\r\n    // language configuration\r\n    lineEnding: string = \"\";\r\n    tabSize: number = 2;\r\n    insertSpaces: boolean = false;\r\n    autoSave: boolean = false;\r\n\r\n    // special characters\r\n    tab = '\\t';\r\n}","export class RegexStrings {\r\n    REGEXP_TOC_START = /\\s*<!--(.*)[^\\/]TOC(.*)-->/gi;\r\n    REGEXP_TOC_STOP = /\\s*<!--(.*)\\/TOC(.*)-->/gi;\r\n    REGEXP_TOC_CONFIG = /\\w+[:=][^\\s]+/gi;\r\n    REGEXP_TOC_CONFIG_ITEM = /(\\w+)[:=]([^\\s]+)/;\r\n    REGEXP_MARKDOWN_ANCHOR = /^<a id=\"markdown-.+\" name=\".+\"><\\/a\\>/;\r\n    REGEXP_CODE_BLOCK1 = /^\\s?```/;\r\n    REGEXP_CODE_BLOCK2 = /^\\s?~~~/;\r\n    REGEXP_ANCHOR = /\\[.+\\]\\(#(.+)\\)/;\r\n    REGEXP_IGNORE_TITLE = /<!-- TOC ignore:true -->/;\r\n\r\n    REGEXP_HEADER_META = /^(\\#*)\\s*((\\d*\\.?)*)\\s*(.+)/;\r\n    REGEXP_UNIQUE_CONFIG_START = /\\s*<!--(.*)[^\\/]TOC UNIQUE CONFIGS(.*)-->/gi;\r\n    REGEXP_UNIQUE_CONFIG_STOP = /\\s*<!--(.*)\\/TOC UNIQUE CONFIGS(.*)-->/gi;\r\n    REGEXP_UNIQUE_CONFIG_LINE = /\\s*<!--( *)(\\w+)[:](\\w+)( *)-->/gi;\r\n\r\n    private static _instance: RegexStrings;\r\n\r\n    private constructor() { }\r\n\r\n    public static get Instance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n}","module.exports = require(\"vscode\");","module.exports = require(\"os\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {\r\n    commands,\r\n    ExtensionContext,\r\n    TextDocumentChangeEvent,\r\n    workspace\r\n} from 'vscode';\r\n\r\nimport { AutoMarkdownToc } from './AutoMarkdownToc';\r\n\r\nexport function activate(context: ExtensionContext) {\r\n\r\n    // create a AutoMarkdownToc\r\n    let autoMarkdownToc = new AutoMarkdownToc();\r\n\r\n    let updateMarkdownToc = commands.registerCommand('extension.updateMarkdownToc', async () => { await autoMarkdownToc.updateMarkdownToc(); });\r\n    let deleteMarkdownToc = commands.registerCommand('extension.deleteMarkdownToc', () => { autoMarkdownToc.deleteMarkdownToc(); });\r\n    let updateMarkdownSections = commands.registerCommand('extension.updateMarkdownSections', () => { autoMarkdownToc.updateMarkdownSections(); });\r\n    let deleteMarkdownSections = commands.registerCommand('extension.deleteMarkdownSections', () => { autoMarkdownToc.deleteMarkdownSections(); });\r\n\r\n    // Events\r\n    let saveMarkdownToc = workspace.onDidSaveTextDocument(() => {\r\n        autoMarkdownToc.onDidSaveTextDocument();\r\n    });\r\n    let changedTextDocument = workspace.onDidChangeTextDocument((event: TextDocumentChangeEvent) => {\r\n        autoMarkdownToc.onDidChangeTextDocument(event);\r\n    });\r\n\r\n    // Add to a list of disposables which are disposed when this extension is deactivated.\r\n    context.subscriptions.push(updateMarkdownToc);\r\n    context.subscriptions.push(deleteMarkdownToc);\r\n    context.subscriptions.push(updateMarkdownSections);\r\n    context.subscriptions.push(deleteMarkdownSections);\r\n\r\n    context.subscriptions.push(saveMarkdownToc);\r\n    context.subscriptions.push(changedTextDocument);\r\n}\r\n\r\n// this method is called when your extension is deactivated\r\nexport function deactivate() { }"],"names":["emojiRegex","basicGithubId","text","replace","getGithubId","repetition","getBitbucketId","getGhostId","basicGhostId","getGitlabId","module","exports","header","mode","moduleName","Error","hd","getNodejsId","href","trim","toLowerCase","encodeURI","configManager","ConfigManager","headerManager","HeaderManager","this","tocManager","TocManager","onDidChangeTextDocument","event","contentChanges","length","updateTocRange","onDidSaveTextDocument","options","UPDATE_ON_SAVE","value","isProgrammaticallySave","editor","window","activeTextEditor","undefined","doc","document","languageId","getTocRange","isSingleLine","updateMarkdownToc","save","async","autoMarkdownToc","updateOptions","tocRange","headerList","getHeaderList","edit","editBuilder","delete","deleteAnchors","createToc","start","insertAnchors","deleteMarkdownToc","updateHeadersWithSections","forEach","range","line","lineAt","isEmptyOrWhitespace","insert","Position","lineEnding","ORDERED_LIST","fullHeaderWithOrder","fullHeaderWithoutOrder","config","isOrderedListDetected","element","insertAnchor","tocRowWithAnchor","tocWithoutOrder","match","RegexStrings","Instance","REGEXP_ANCHOR","anchor","id","name","insertPosition","end","character","ANCHOR_MODE","AnchorMode","bitbucket","slice","push","join","INSERT_ANCHOR","index","lineCount","REGEXP_MARKDOWN_ANCHOR","startPosition","getStartPositionOfAnchorLine","Range","concat","generateTocStartIndicator","minimumRenderedDepth","depth","Math","min","tocRows","DEPTH_FROM","isIgnored","row","generateTocRow","indentRepeatTime","max","tab","repeat","BULLET_CHAR","WITH_LINKS","getTocString","tocWithOrder","tocStartIndicator","generateCustomOptionsInTocStart","optionsFlag","optionKey","indexOf","getOptionValueByKey","dispose","Options","loadConfigurations","loadCustomOptions","workspaceValue","workspace","getConfiguration","extensionName","get","key","DEPTH_TO","DETECT_AUTO_SET_SECTION","EOL","tabSize","insertSpaces","autoSave","lineText","REGEXP_TOC_START","REGEXP_TOC_CONFIG","pair","REGEXP_TOC_CONFIG_ITEM","exec","toLocaleLowerCase","lowerCaseKey","uniqueValue","parseValidNumber","parseBool","num","parseInt","constructor","fileUri","commands","executeCommand","filter","sym","kind","SymbolKind","String","Uri","file","fileName","symbols","getDocumentSymbols","headerLevels","Map","allHeaders","Array","convertAllFirstLevelHeader","consideredDepthToInclude","getMostPopularHeaderDepth","getIsHeaderIgnored","orderArray","calculateHeaderOrder","orderedListString","addHeaderChildren","detectAutoOrderedHeader","previousLine","REGEXP_IGNORE_TITLE","mostPopularHeaderDepth","mostPopularHeaderDepthCount","Header","convertFromSymbol","depthCount","set","symbol","children","headerBeforePushToList","lastHeaderInList","previousHeader","Object","assign","scanForTocRange","Utilities","isLineStartOrEndOfCodeBlock","getNextLineIndexIsNotInCode","REGEXP_TOC_STOP","selection","active","static","currentLineIndex","lineNumber","nextLine","isCodeStyle1","REGEXP_CODE_BLOCK1","isCodeStyle2","REGEXP_CODE_BLOCK2","headerText","encodeURIComponent","defaultWorkspaceValue","anchorMode","headerMark","dirtyTitle","github","Anchor","headerTextSplit","REGEXP_HEADER_META","cleanUpTitle","isHeader","tocString","title","ANCHOR_MARKDOWN_HEADER","Dictionary","REGEXP_UNIQUE_CONFIG_START","REGEXP_UNIQUE_CONFIG_STOP","REGEXP_UNIQUE_CONFIG_LINE","_instance","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","context","AutoMarkdownToc","registerCommand","updateMarkdownSections","deleteMarkdownSections","saveMarkdownToc","changedTextDocument","subscriptions"],"sourceRoot":""}